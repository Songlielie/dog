Compiled from "NoReturn.java"
public class NoReturn {
  java.lang.String str;

  char[] ch;

  public NoReturn();
    Code:
       0: aload_0           #将第一个引用类型本地变量推送至栈顶 str
       1: invokespecial #1  #调用超类构造方法，实例初始化方法，私有方法                // Method java/lang/Object."<init>":()V
       4: aload_0           #将第一个引用类型本地变量推送至栈顶
       5: new           #2  #创建一个对象，并将其引用值压入栈顶    good            // class java/lang/String
       8: dup               #复制栈顶数值并将复制值压入栈顶
       9: ldc           #3  #将int,                // String good
      11: invokespecial #4  #调用超类构造方法，实例初始化方法，私有方法                // Method java/lang/String."<init>":(Ljava/lang/String;)V
      14: putfield      #5  #为指定的类的实例域赋值                // Field str:Ljava/lang/String;
      17: aload_0           #将第一个引用类型本地变量推送至栈顶
      18: iconst_3          #将 int 型 3 推送至栈顶
      19: newarray          #创建一个指定原始类型（如int, float, char…）的数组，并将其引用值压入栈顶       char
      21: dup
      22: iconst_0          #将 int 型 0 推送至栈顶
      23: bipush        97  #将单字节的常量值 (-128~127) 推送至栈顶
      25: castore           #将栈顶 char 型数值存入指定数组的指定索引位置
      26: dup               #复制栈顶数值并将复制值压入栈顶
      27: iconst_1
      28: bipush        98
      30: castore
      31: dup
      32: iconst_2
      33: bipush        99
      35: castore
      36: putfield      #6  #为指定的类的实例域赋值                // Field ch:[C
      39: return            #从当前方法返回void


  public static void main(java.lang.String[]);
    Code:
       0: new           #7                  // class NoReturn
       3: dup
       4: invokespecial #8                  // Method "<init>":()V
       7: astore_1          #将栈顶引用型数值存入第二个本地变量
       8: aload_1
       9: aload_1
      10: getfield      #5  #获取指定类的实例域，并将其值压入栈顶                // Field str:Ljava/lang/String;
      13: aload_1
      14: getfield      #6                  // Field ch:[C
      17: invokevirtual #9                  // Method exchange:(Ljava/lang/String;[C)V
      20: getstatic     #10 #获取指定类的静态域，并将其值压入栈顶                // Field java/lang/System.out:Ljava/io/PrintStream;
      23: new           #11                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      30: aload_1
      31: getfield      #5  #获取指定类的实例域，并将其值压入栈顶                // Field str:Ljava/lang/String;
      34: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: ldc           #14                 // String 和
      39: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokevirtual #16                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      48: getstatic     #10                 // Field java/lang/System.out:Ljava/io/PrintStream;
      51: aload_1
      52: getfield      #6                  // Field ch:[C
      55: invokevirtual #17                 // Method java/io/PrintStream.println:([C)V
      58: return

  public void exchange(java.lang.String, char[]);
    Code:
       0: ldc           #18                 // String test ok
       2: astore_1
       3: aload_2
       4: iconst_0
       5: bipush        103
       7: castore
       8: return
}
